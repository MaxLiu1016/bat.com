generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  name         String
  password     String
  profileImage String
  createdAt    DateTime @default(now()) @db.Date
  updatedAt    DateTime @updatedAt @db.Date
  username     String   @unique

  // Refresh token
  refreshToken RefreshToken[]

  // Post
  post Post[]

  // Media
  media MediaFile[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  replyToId String? @db.ObjectId
  replyTo   Post?   @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Post[]  @relation("replies")

  // MediaFiles
  mediaFiles MediaFile[]
}

model MediaFile {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // Posts
  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
}
